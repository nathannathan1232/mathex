// Generated by CoffeeScript 1.9.3
(function() {
  var ASSIGNMENT_OPERATORS, DEFAULT_MODULES, Decimal, binary_operation, calc, calc_line, clone, load_module;

  Decimal = require('./decimal.js');

  DEFAULT_MODULES = {
    'stdlib': './stdlib.js'
  };

  clone = function(obj) {
    var i, res;
    res = {};
    for (i in obj) {
      if (obj.hasOwnProperty(i)) {
        res[i] = obj[i];
      }
    }
    return res;
  };

  load_module = function(filename, scope) {
    var i, m, results;
    filename = DEFAULT_MODULES[filename] || filename;
    m = require(filename);
    for (i in m.variables) {
      scope[i] = m.variables[i];
    }
    results = [];
    for (i in m.functions) {
      results.push(scope[i] = {
        function_type: 'native',
        fn: m.functions[i]
      });
    }
    return results;
  };

  ASSIGNMENT_OPERATORS = ['=', '+=', '-=', '*=', '/=', '%='];

  binary_operation = function(a, b, op) {
    if (!(typeof a === 'object' && typeof b === 'object')) {
      return false;
    }
    switch (op) {
      case '^':
        if (isZero(a) ^ isZero(b)) {
          return new Decimal(1);
        } else {
          return new Decimal(0);
        }
        break;
      case '&&':
        if (!(isZero(a) || isZero(b))) {
          return new Decimal(1);
        } else {
          return new Decimal(0);
        }
        break;
      case '||':
        if (!(isZero(a) && isZero(b))) {
          return new Decimal(1);
        } else {
          return new Decimal(0);
        }
        break;
      case '<':
        if (a.lessThan(b)) {
          return new Decimal(1);
        } else {
          return new Decimal(0);
        }
        break;
      case '>=':
        if (!a.lessThan(b)) {
          return new Decimal(1);
        } else {
          return new Decimal(0);
        }
        break;
      case '>':
        if (!a.lessThanOrEqualTo(b)) {
          return new Decimal(1);
        } else {
          return new Decimal(0);
        }
        break;
      case '<=':
        if (a.lessThanOrEqualTo(b)) {
          return new Decimal(1);
        } else {
          return new Decimal(0);
        }
        break;
      case '==':
        if (a.equals(b)) {
          return new Decimal(1);
        } else {
          return new Decimal(0);
        }
        break;
      case '!=':
        if (!a.equals(b)) {
          return new Decimal(1);
        } else {
          return new Decimal(0);
        }
        break;
      case '<<':
        return a.bitShift(b);
      case '>>':
        return a.bitShift(-b);
      case '+':
        return a.add(b);
      case '-':
        return a.minus(b);
      case '*':
        return a.times(b);
      case '/':
        return a.dividedBy(b);
      case '%':
        return a.mod(b);
      case '**':
        return a.pow(b);
    }
  };

  calc_line = function(node, scope, iteration, line) {
    var a, b, i, j, k, l, len, local, n, name, p, ref, ref1, ref2, ref3, ref4, results, times, v;
    if (scope == null) {
      scope = {};
    }
    switch (node.type) {
      case 'block':
        results = [];
        for (i = j = 0, ref1 = node.children.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
          results.push(console.log((line + i) + ':' + iteration + ': ' + calc_line(node.children[i], scope) + ''));
        }
        return results;
        break;
      case 'conditional':
        switch (node.value) {
          case 'repeat':
            times = Number(calc_line(node.times, scope) + '');
            for (i = k = 0, ref2 = times; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
              calc_line(node.block, scope, i, line);
            }
            break;
          case 'while':
            i = 0;
            while (!calc_line(node.times, scope).isZero()) {
              calc_line(node.block, scope, i, line);
              i += 1;
            }
            break;
          case 'if':
            if (!calc_line(node.times, scope).isZero()) {
              calc_line(node.block, scope, 0, line);
            }
        }
        return '-';
      case 'variable':
        if (!scope.hasOwnProperty(node.value)) {
          throw 'No variable named ' + node.value;
        }
        return scope[node.value];
      case 'number':
        return new Decimal(node.value);
      case 'binary_operation':
        if (ASSIGNMENT_OPERATORS.includes(node.value)) {
          v = node.left.value;
          b = calc_line(node.right, scope);
          if (node.value === '=') {
            return scope[v] = b;
          } else {
            return scope[v] = binary_operation(scope[v], b, node.value[0]);
          }
        } else {
          a = calc_line(node.left, scope);
          b = calc_line(node.right, scope);
          return binary_operation(a, b, node.value);
        }
        break;
      case 'function_define':
        scope[node.value] = {
          function_type: 'local',
          params: node.params,
          block: node.block
        };
        return node.value + ' <- [function]';
      case 'function_call':
        name = node.value;
        if (scope[name].function_type === 'native') {
          p = [];
          ref3 = node.params;
          for (l = 0, len = ref3.length; l < len; l++) {
            i = ref3[l];
            p.push(calc_line(i, scope));
          }
          return scope[name].fn(p);
        } else if (scope[name].function_type === 'local') {
          local = clone(scope);
          for (i = n = 0, ref4 = scope[name].params.length; 0 <= ref4 ? n < ref4 : n > ref4; i = 0 <= ref4 ? ++n : --n) {
            local[scope[name].params[i]] = calc_line(node.params[i], scope);
          }
          return calc_line(scope[name].block, local);
        }
        break;
      case 'annotation':
        switch (node.value) {
          case '@include':
            ref = node.ref.replace(/"/g, '');
            load_module(ref, scope);
            return 'Module ' + ref + ' loaded!';
          case '@precision':
            Decimal.set({
              precision: Number(node.ref)
            });
            return 'Precision set to ' + node.ref;
        }
    }
  };

  calc = function(block) {
    var i, j, ref1, results, scope;
    scope = {};
    results = [];
    for (i = j = 0, ref1 = block.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
      results.push(console.log(i + ':   ' + calc_line(block[i], scope, 0, i) + ''));
    }
    return results;
  };

  module.exports = calc;

}).call(this);
